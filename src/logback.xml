<?xml version="1.0" encoding="UTF-8"?>
<!--
    scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
    debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="30 seconds" debug="true">
    <!-- 控制台设置
         CONSOLE/consoleAppender:表示当前日志信息是可以输出到控制台的
     -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 输出流对象 默认System.out 改为 System.err -->
        <target>System.out</target>
        <encoder>
            <pattern>%d{yyy-MM-dd HH:mm:ss.SSS} [%-5level] %c [%thread] : %msg%n</pattern>
        </encoder>
    </appender>
    <!-- File是输出的方向通向文件的 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>%d{yyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            <charset>utf-8</charset>
        </encoder>
        <!-- 日志输出路径 -->
        <file>F:/javaLog/java.log</file>
        <!-- 指定日志文件拆分和压缩规则 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 通过指定压缩文件名称，来确定分割文件方式 -->
            <fileNamePattern>F:/javaLog/java-%d{yyy-MMdd}.log%i.gz</fileNamePattern>
            <!-- 文件拆分大小 -->
            <maxFileSize>50MB</maxFileSize>
        </rollingPolicy>
    </appender>>
    <!--
        level:用来设置打印级别，大小写无关：TRACE,DEBUG,INFO,WARN,ERROR   | ALL 和 OFF,默认debug
        <root>可以包含零个或者多个<appender-ref>元素，标识这个输出位置将会被本日志级别控制
    -->
    <root level="ALL"><!-- debug -->
        <!-- 注意：这个地方如果不配置，则指定位置不会打印日志 -->
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
    </root>
</configuration>
